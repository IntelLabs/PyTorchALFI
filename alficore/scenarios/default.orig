##################################
#  Basic wrapper configuration   #
##################################

# print: boolean, print model structure and state structure after loading
# optional
# default: False
print: False

# fi_logfile: name of logfile to store the used FI scenario. Directory will be 'logs'.
# A timestamp and the ending.bin will be added.
# optional
# uncomment below line
fi_logfile: fault_rates_alexnet_1
layer_boundsfile: /.../ranger/bounds/yolov3_bounds_kitti_train20p_act_v2.txt
# read_from_file: absolute path to logfile to read previously stored FI scenario from.
# also see fi-logfile
# optional
# uncomment below line
# read_from_file: 'logs/fault_rates_weights_msb_600.bin'


#################################
#   definition of FI scenario   #
#################################

# define type of run. Valid values are: {single|accumulate}
# single: at each injection run only the faults for that run are injected
# accumulate: at each injection run the faults for that run and all previous run are applied together
# default: single
run_type: single

# This determines the total number of fault definitions that are prepared
# The relevant parameters are:
# dataset_size: number of images in your test dataset
# num_runs: number of times you plan to iterate through the whole dataset
# the following 2 arguments are mutually exclusive:
# num_fault_per_image: how many faults should be injected per image
# max_fault_rate: maximum rate of faults you would like to inject -> as floating point number
# this is a max value because you could decide during run time to use a smaller fault rate for a specific
# injection, the maximum value assures that enough faults are prepared
# the absolute number of faults will be determined by the following other parameters:
# a: rnd_mode (either neurons or weights) the number of faults is calculated based on the number of relevant neurons
# or weights respectively in the model
# b: layer_types (either conv2d, conv3d or fcc) relevant neurons or weights are those related to the selected layer type
dataset_size: 1 # keep at 1 for weight injection if used only once per epoch
num_runs: 2
# you can only set one of num_faults_per_image or max_fault_rate
max_faults_per_image: 1
#max_fault_rate: 0.01

#####################################################################################
#                           types of layers supported                               #
#####################################################################################
# comma separated list in square brackets (yaml convention).
# default is conv2
# supported layers: conv2, fcc, conv3
# conv2d: 2D convolution layer
# conv3d: 3D convolution layer
# fcc: fully connected layer = nn.Linear type in pytorch
# layer_types: [conv2d, fcc]
layer_types: [conv2d]

#####################################################################################
#                           Random fault definition                                 #
#####################################################################################
# this section is ignored if value_type = static
# There are 2 basic injection modes: {weights|neurons}
# For NEURONS the parameter for k is ignored. The following degrees of freedom exist: Batches, Layers (out of conv layers),
# location (height + width + channel) of feature map and the value itself.
# for each of these except batch the following options exist: {same|change}
# for batch the following options exist: {each|same|change}
# same: in the first run a random value is calculated once, it remains constant afterwards
# change: in each run a new random value is calculated
# each: (batch only) apply to every batch
# There is a dependency between layers and locations.
# If layers is set to 'change' then location also has to be 'change'
# because layers have different sizes and the same location in a different
# layer might be invalid.
#
# For WEIGHTS the parameter for batch is ignored. The following degrees of freedom exist: Layers (out of conv layers),
# location (height + width + channel + k)  and the value itself
# a setting for batch is ignored in context of weight injection
# default: neurons
rnd_mode: neurons
rnd_mode: weights
# inj_policy_opts = ["per_image", "per_epoch", "per_batch"]
inj_policy: per_batch
# inj_policy: per_epoch
# inj_policy: per_batch

# mandatory, no defaults
# batch only used for neuron
rnd_batch: change
# rnd_layer allows to set the index of the layer where all fault injections occur
# this is a 0 based index: e.g. for first layer set it to 0
# this is currently only relevant for convolutional layers
# rnd_layer and rnd_location should be changed to same setting
# layer change and location same does not make sense beause layer dimensions differ
rnd_layer: change
# rnd_layer: 0
# select layer randomly based on the number of neurons per layer, layer with more neurons are weighted higher
rnd_layer_weighted: True
rnd_location: change
rnd_value: change
# for value also complete the next section

#
# For the value itself there are 2 options: {number|bitflip}
# in the first case a min-max range needs to be given
# in the second case the maximum bit position and optionally
# a bit range is given which can also be a single number
# both cases are mutual exclusive
#rnd_value_type: number
#rnd_value_min: 100
#rnd_value_max: 1000

# rnd_value_type: ["number", "bitflip", "bitflip_bounds", "bitflip_weighted", "stuckat_0", "stuckat_1"]
# rnd_value_type: stuckat_1
rnd_value_type: bitflip
rnd_value_bits: 32
# rnd_bit_range: optional, defines the bit range where a bit flip should happen
# the index is 0 based
# [from, to], both values are included in the range
# if only one value us given then exactly this bit is flipped
# rnd_bit_range: [1]
# rnd_bit_range: [0,9]
rnd_bit_range: [1]
rnd_bit_range: [0,8]
rnd_bit_range: [0,31]

#####################################################################################
#                           PytorchFI parameters                                    #
#####################################################################################
# parameters to initialize the PytorchFI fault injector
# ptf_H: height of input images in pixels
# ptf_W: width of input images in pixels
# ptf_D: depth of input images -> only needed for 3dconv layers
# ptf_C: number of input channels (default: 3)
# ptf_batch_size: number of images processed at the same time
# ptf_H: 224
# ptf_W: 224
## kitti
# # detectron2 kitti
# ptf_H: 370
# ptf_W: 1224
# detectron2 coco
# ptf_H: 416
# ptf_W: 416

# # lyft
# ptf_H: 1080
# ptf_W: 1920

# # ptf_H: 100
# # ptf_W: 100

# ptf_H: 640
# ptf_W: 640

# yolov3 ultra CoCo
# ptf_H: 416
# ptf_W: 416

# ultralytics yolov3 (except coco)
ptf_H: 384
ptf_W: 640

# ultralytics yolov3 (except coco)
#ptf_H: 224
#ptf_W: 640

ptf_D: -1
ptf_C: 3
ptf_batch_size: 1

####################################################################################
#                           User fault-file save location                           #
####################################################################################
# save_fault_file_dir: 'result_files/layer_weighted/msb_runs/'
# save_fault_file_dir: 'result_files/test_runs/'
save_fault_file_dir: 'result_files/result_files_paper'
# save_fault_file_dir: 'result_files/imagenet/'
